// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: hostagent.proto

package landscape_hostagent_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LandscapeHostAgent_Connect_FullMethodName = "/landscapehostagentapi.LandscapeHostAgent/Connect"
)

// LandscapeHostAgentClient is the client API for LandscapeHostAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LandscapeHostAgent service.
// The connection is made from the hostagent (client) to the landscape server (sass or on-prem).
type LandscapeHostAgentClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (LandscapeHostAgent_ConnectClient, error)
}

type landscapeHostAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLandscapeHostAgentClient(cc grpc.ClientConnInterface) LandscapeHostAgentClient {
	return &landscapeHostAgentClient{cc}
}

func (c *landscapeHostAgentClient) Connect(ctx context.Context, opts ...grpc.CallOption) (LandscapeHostAgent_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LandscapeHostAgent_ServiceDesc.Streams[0], LandscapeHostAgent_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &landscapeHostAgentConnectClient{ClientStream: stream}
	return x, nil
}

type LandscapeHostAgent_ConnectClient interface {
	Send(*HostAgentInfo) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type landscapeHostAgentConnectClient struct {
	grpc.ClientStream
}

func (x *landscapeHostAgentConnectClient) Send(m *HostAgentInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *landscapeHostAgentConnectClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LandscapeHostAgentServer is the server API for LandscapeHostAgent service.
// All implementations must embed UnimplementedLandscapeHostAgentServer
// for forward compatibility
//
// LandscapeHostAgent service.
// The connection is made from the hostagent (client) to the landscape server (sass or on-prem).
type LandscapeHostAgentServer interface {
	Connect(LandscapeHostAgent_ConnectServer) error
	mustEmbedUnimplementedLandscapeHostAgentServer()
}

// UnimplementedLandscapeHostAgentServer must be embedded to have forward compatible implementations.
type UnimplementedLandscapeHostAgentServer struct {
}

func (UnimplementedLandscapeHostAgentServer) Connect(LandscapeHostAgent_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedLandscapeHostAgentServer) mustEmbedUnimplementedLandscapeHostAgentServer() {}

// UnsafeLandscapeHostAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandscapeHostAgentServer will
// result in compilation errors.
type UnsafeLandscapeHostAgentServer interface {
	mustEmbedUnimplementedLandscapeHostAgentServer()
}

func RegisterLandscapeHostAgentServer(s grpc.ServiceRegistrar, srv LandscapeHostAgentServer) {
	s.RegisterService(&LandscapeHostAgent_ServiceDesc, srv)
}

func _LandscapeHostAgent_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LandscapeHostAgentServer).Connect(&landscapeHostAgentConnectServer{ServerStream: stream})
}

type LandscapeHostAgent_ConnectServer interface {
	Send(*Command) error
	Recv() (*HostAgentInfo, error)
	grpc.ServerStream
}

type landscapeHostAgentConnectServer struct {
	grpc.ServerStream
}

func (x *landscapeHostAgentConnectServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *landscapeHostAgentConnectServer) Recv() (*HostAgentInfo, error) {
	m := new(HostAgentInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LandscapeHostAgent_ServiceDesc is the grpc.ServiceDesc for LandscapeHostAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LandscapeHostAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "landscapehostagentapi.LandscapeHostAgent",
	HandlerType: (*LandscapeHostAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _LandscapeHostAgent_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hostagent.proto",
}
