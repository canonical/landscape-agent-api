syntax = "proto3";

option go_package = "github.com/canonical/landscape-hostagent-api";
package landscapehostagentapi;

// LandscapeHostAgent service.
// The connection is made from the hostagent (client) to the landscape server (sass or on-prem).
service LandscapeHostAgent {
    rpc Connect (stream HostAgentInfo) returns (stream Command) {}
}


message HostAgentInfo {
    string token = 1;                      // token corresponds to the Pro token subscription. Discared on on-prem landscape server.
    string uid = 2;                        // uid is empty on the first request if the host never contacted landscape. Landscape generates one for the hostagent to send it back with each transaction.
    string hostname = 3;                   // hostname is literally the name of the host itself.
    repeated InstanceInfo instances = 4;   // instances are all the machine instances registered on the machine.

    string account_name = 5;                // account_name is the account used in Landscape SaaS.
    optional string registration_key = 6;   // registration_key is an optional account-wide key used to register clients.

    optional string default_instance_id = 7; // default_instance_id is the id of the default instance.
                                             // The default instance will be empty if there are no instances.
                                             // The default instance will not be in the instances list if it is not managed by the host agent.

    // InstanceInfo gather all the information of a given instance.
    message InstanceInfo {
        string id = 1;
        string name = 2;                     // name is the hostname of the instance.
        string version_id = 3;               // version_id string as in VERSION_ID in /etc/os-release
        InstanceState instance_state = 4;    // instance_state are the defined states of the instances.
        string request_id = 5;               // the value Landscape Server provided when the instance was installed
    }
}

// InstanceState reports the supported states of an instance communicated by the agent.
enum InstanceState {
    Stopped = 0;
    Running = 1;
}

// Command is an instruction that landscape can send via its stream to the host agent.
// The command is self-explanatory or specified.
message Command {
    // only one command can be passed at a time.
    oneof cmd {
        AssignHost assign_host = 1;
        Start start = 2;
        Stop stop = 3;
        Install install = 4;
        Uninstall uninstall = 5;
        SetDefault set_default = 6;
        ShutdownHost shutdown_host = 7;
    }

    message AssignHost {
        string uid = 1;
    }
    message Start {
        string id = 1;
    }
    message Stop {
        string id = 1;
    }
    message Install {
        string id = 1;
        optional string cloudinit = 2;  // cloudinit is the yaml configuration to optionally pass to an instance.
        /*
          URL to a WSL rootfs image we will download and import from. It will be registered under "id".
          If this entry is not set, Ubuntu Pro for WSL will download a package from the Microsoft store
          matching WSL distribution name as available in wsl --install.
        */
        optional string rootfsURL = 3;
        /*
          A uuid that Landscape Server assigns to the installation task. Landscape server will associate the installation
          task by this uuid along with any information that it deems relevant to that installation task (profile, activity, etc.).
          This same string should be reported back as part of the instance info.
        */
        optional string request_id = 4;
    }
    message Uninstall {
        string id = 1;
    }
    // SetDefault changes the default instance on the host.
    message SetDefault {
        string id = 1;
    }
    // ShutdownHost forces a shut down of the agent/controller from landscape perspective (it may autorestart).
    message ShutdownHost{}
}
